#Sida Xiong

Part 1 Explanation:
dig utoronto.ca
dig utoronto.ca MX
dig utoronto-ca.mail.protection.outlook.com.
Above are commands I use to dig to the default DNS server on the ECF machines (not the BIND server).
If we need to dig to BIND server, we can use the following command; 8886 is the port that our BIND is listening on.
dig @128.100.8.48 -p 8886 utoronto.ca
where 128.100.8.48 is the IP of remote.ecf.utoronto.ca

Part 2 Explanation:
The proxy server accepts DNS queries from dig and forwards them to the BIND server we setup earlier. 
It also receive a DNS reply from the BIND server and forward it back to dig.
python2 dnsproxy_starter.py --port 4434 --dns_port 8886
we use the above command to start our proxy, our proxy is working on the port number 4434,
and the BIND is working on 8886,
so if we dig as: dig @128.100.8.48 -p 8886 google.com, we dig to BIND,
and if we dig as dig @128.100.8.48 -p 4434 google.com, we dig to the proxy,
if we get the same answer, it shows that our proxy works properly.

Part 3 Explanation:
python2 dnsproxy_starter.py --port 4434 --dns_port 8886 --spoof_response 
We use above command, and the proxy will forge a fake answer back to dig,
and we forge that example.com's IPv4 address is 1.2.3.4, and its nameserver is ns.dnslabattacker.net

Part 4 Explanation:
./part4_starter.py --ip 128.100.8.48 --port 8886 --dns_port 8886 --query_port 6032
We use above command to run part4.
First, we use socket to send the BIND a query, asking about a unique subdomain of example.com, like a94nztx29j.example.com.
And since this is a unique subdomain name, the BIND would not have the cache, so it will ask out and wait for the reply,
and now we flood BIND's query port with our spoof reply, each one has a random query id, hoping one is correct and will make BIND cache our spoof reply. 
I want to mention that we should flood BIND with lots of replies at a very short time, because we should make the reply arrive earlier than the outside's actual reply, 
so we'd better send all forged replies first without checking if our reply is cached in BIND (because checking needs time, and this time is enough for the actual outside response to arrive first)
And the reason we flood the BIND's query port instead of listen port is that it uses its query port to ask out and wait for the reply to return to this port.
If BIND caches our fake reply, it will then send it out to reply our first query about that unique subdomain of example.com
And we can look into what BIND replies to us, finding that the answer is our spoof one, which means we success to spoof.






